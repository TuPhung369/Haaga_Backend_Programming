{
	"info": {
		"_postman_id": "355669ca-3f53-4244-a4db-c2870dfcbc76",
		"name": "Spring_Boot-Up-Token",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35194334"
	},
	"item": [
		{
			"name": "Kanban",
			"item": [
				{
					"name": "KanbanBoard_Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Testing BE\",\n  \"userId\": \"{{userId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/kanban/boards",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"kanban",
								"boards"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "KanbanBoard_Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/kanban/boards/a041e981-3ef5-42d4-897f-531d5e49841a",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"kanban",
								"boards",
								"a041e981-3ef5-42d4-897f-531d5e49841a"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "KanbanBoard_Get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Testing BE\",\n  \"userId\": \"{{userId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/kanban/boards?userId={{userId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"kanban",
								"boards"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "KanbanTask_Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"New task\",\n    \"priority\": \"High\",\n    \"columnId\": \"38c8a2c3-fde5-4342-8187-cb2a425732fc\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/kanban/tasks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"kanban",
								"tasks"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "KanbanTask_Move",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"taskId\": \"2c3ad460-e464-414b-acbb-619f6703fc71\",\n    \"targetColumnId\": \"54e68fef-ad37-402e-be28-6492a66a5d88\",\n    \"newPosition\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/kanban/tasks/move",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"kanban",
								"tasks",
								"move"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "KanbanColumn_Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"New Column\",\n  \"boardId\": \"a381a588-1989-4b26-b381-92bc02431743\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/kanban/columns",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"kanban",
								"columns"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "KanbanColumn_Move",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"columnId\": \"aaa18e67-cf5f-4187-8bd7-b9ce6877e789\",\n  \"newPosition\": 4\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/kanban/columns/move",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"kanban",
								"columns",
								"move"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Event",
			"item": [
				{
					"name": "Event_Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Team Meeting Dayly 2\",\n  \"start\": \"2025-03-01T10:00:00\",\n  \"end\": \"2025-03-01T11:00:00\",\n  \"date\": \"2025-03-01T10:00:00\",\n  \"description\": \"Weekly team sync\",\n  \"color\": \"#FF5733\",\n  \"allDay\": false,\n  \"repeat\": \"Weekly\",\n  \"userId\": \"{{userId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/events",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Event_getAll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\" : \"{{userId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/events?userId={{userId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Event_updateById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "        {\r\n            \"id\": \"27857050-3eac-4044-8d79-834e0f339ead\",\r\n            \"seriesId\": \"0619802f-9156-4696-a4cd-c63060e7c80c\",\r\n            \"title\": \"Update Manager\",\r\n            \"start\": \"2025-02-27T06:22:00\",\r\n            \"end\": \"2025-02-27T06:52:00\",\r\n            \"date\": \"2025-02-27T06:22:00\",\r\n            \"description\": \"\",\r\n            \"color\": \"#BAF46C\",\r\n            \"allDay\": false,\r\n            \"repeat\": \"weekly\",\r\n            \"userId\": \"b47d94f9-2d9d-4eb9-b185-79722dbfd102\",\r\n            \"createdAt\": \"2025-02-27T08:22:23.427528\",\r\n            \"exceptions\": []\r\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/events/27857050-3eac-4044-8d79-834e0f339ead",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"27857050-3eac-4044-8d79-834e0f339ead"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Event_Series_updateById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"title\": \"Team Meeting Weekly Updated\",\r\n        \"start\": \"2025-03-01T10:00:00\",\r\n        \"end\": \"2025-03-01T11:00:00\",\r\n        \"date\": \"2025-03-01T10:00:00\",\r\n        \"description\": \"Weekly team sync\",\r\n        \"color\": \"#FF5733\",\r\n        \"allDay\": false,\r\n        \"repeat\": \"Weekly\",\r\n        \"userId\": \"ac1f01af-54d9-4b71-8ba3-b56602ae9f51\",\r\n        \"createdAt\": \"2025-02-26T21:00:54.494012\",\r\n        \"exceptions\": [\r\n            {\"originalStart\": \"2025-03-08T10:00:00\"}\r\n        ]\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/events/series/73d855d3-e554-4386-b338-e23b6ed06909",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"series",
								"73d855d3-e554-4386-b338-e23b6ed06909"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Event_deleteById",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/events/5c012963-4811-4fe8-98fa-8be3be287e37",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"events",
								"5c012963-4811-4fe8-98fa-8be3be287e37"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Role-Permission",
			"item": [
				{
					"name": "Permission_Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"UPDATE\",\n    \"description\": \"Update permission\",\n    \"color\": \"#20B2AA\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/permissions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"permissions"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Permission_getAll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/permissions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"permissions"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Permission_deleteByName",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/permissions/UPDATE",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"permissions",
								"UPDATE"
							]
						}
					},
					"response": []
				},
				{
					"name": "Role_Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"USER\",\n  \"description\": \"User role\",\n  \"color\": \"#4682B4\",\n  \"permissions\": [\"READ\", \"UPDATE\"]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/roles",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"roles"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Role_getAll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/roles",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"roles"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Role_deleteById",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/roles/ADMIN",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"roles",
								"ADMIN"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login-getToken-ADMIN",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = pm.response.json();\r",
							"pm.environment.set(\"access_token\", response.result.token);\r",
							"pm.environment.set(\"refresh_token\", response.result.refreshToken);\r",
							"console.log(\"Access token saved: \" + response.result.token.substring(0, 15) + \"...\");\r",
							"console.log(\"Refresh token saved: \" + response.result.refreshToken.substring(0, 15) + \"...\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"adminTom\",\r\n    \"password\": \"Thanhcong6(\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/token",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login-Token-ADMIN Cookies",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = pm.response.json();\r",
							"pm.environment.set(\"access_token\", response.result.token);\r",
							"console.log(\"Access token saved: \" + response.result.token.substring(0, 15) + \"...\");\r",
							"console.log(\"Refresh token is stored in cookies\");\r",
							"// Log request URL Ä‘á»ƒ xÃ¡c nháº­n\r",
							"console.log(\"Request URL:\", pm.request.url.toString());\r",
							"\r",
							"// Kiá»ƒm tra response headers\r",
							"const setCookieHeader = pm.response.headers.get('Set-Cookie');\r",
							"console.log(\"Set-Cookie header:\", setCookieHeader);\r",
							"\r",
							"// Láº¥y cookie tá»« cookie jar\r",
							"pm.cookies.get(pm.request.url.toString(), function (error, cookies) {\r",
							"    if (error) {\r",
							"        console.error(error);\r",
							"    } else {\r",
							"        console.log(\"All cookies for this domain:\", cookies);\r",
							"    }\r",
							"});\r",
							"var template = `\r",
							"<style type=\"text/css\">\r",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
							"    .tftable tr {background-color:#ffffff;}\r",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
							"    .tftable tr:hover {background-color:#e0ffff;}\r",
							"</style>\r",
							"\r",
							"<table class=\"tftable\" border=\"1\">\r",
							"    <tr>\r",
							"        <th>Code</th>\r",
							"        <th>Token</th>\r",
							"        <th>Refresh Token</th>\r",
							"        <th>Authenticated</th>\r",
							"    </tr>\r",
							"    <tr>\r",
							"        <td>{{response.code}}</td>\r",
							"        <td>{{response.result.token}}</td>\r",
							"        <td>{{response.result.refreshToken}}</td>\r",
							"        <td>{{response.result.authenticated}}</td>\r",
							"    </tr>\r",
							"</table>\r",
							"`;\r",
							"\r",
							"function constructVisualizerPayload() {\r",
							"    return {response: pm.response.json()}\r",
							"}\r",
							"\r",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"adminTom\",\r\n    \"password\": \"Thanhcong6(\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/token/cookie",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"token",
						"cookie"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test API key AI",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = pm.response.text();\r",
							"console.log(\"TOTP enabled: \" + response);\r",
							"console.log(\"Email sent: \" + response);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{OPENAI_API_KEY}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.openai.com/v1/models",
					"protocol": "https",
					"host": [
						"api",
						"openai",
						"com"
					],
					"path": [
						"v1",
						"models"
					]
				}
			},
			"response": []
		},
		{
			"name": "refreshTokenCookie",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"accessToken\", pm.response.json().result.token);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/refresh/cookie",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"refresh",
						"cookie"
					]
				}
			},
			"response": []
		},
		{
			"name": "LogoutCookie",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Fixed accessing token property\r",
							"pm.environment.set(\"accessToken\", pm.response.json().token);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/logout/cookie",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"logout",
						"cookie"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login-getToken-MANAGER",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const accessToken = response.result.token; // Store the token in a variable\r",
							"\r",
							"pm.environment.set(\"accessToken\", accessToken); // Save the token to the environment\r",
							"//console.log(\"Access Token:\", accessToken); // Log the token to the console"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"managerTom\",\r\n    \"password\": \"Thanhcong6(\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/token",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login-getToken-USER",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const accessToken = response.result.token; // Store the token in a variable\r",
							"\r",
							"pm.environment.set(\"accessToken\", accessToken); // Save the token to the environment\r",
							"//console.log(\"Access Token:\", accessToken); // Log the token to the console"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"userTom1\",\r\n    \"password\": \"Thanhcong6(\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/token",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "OAuth2-Login",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImQ5NzQwYTcwYjA5NzJkY2NmNzVmYTg4YmM1MjliZDE2YTMwNTczYmQiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJhenAiOiI1NTQ0MDg1Mzc3NTktOGs3aXNkZnY3b3Rpa3ZyZTh0cnZ2bDVlazA3M2U2YWEuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJhdWQiOiI1NTQ0MDg1Mzc3NTktOGs3aXNkZnY3b3Rpa3ZyZTh0cnZ2bDVlazA3M2U2YWEuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJzdWIiOiIxMTIxNzQ2MDg1NTc1MTY2NTM3NzciLCJlbWFpbCI6InR1cGh1bmcwMTA3ODdAZ21haWwuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImF0X2hhc2giOiJGSFJPNF90eXdBRFE2emozaFJtbGF3Iiwibm9uY2UiOiJteUNSRGtheGxZS2ZNVHkzRmFqRzlWZ0xkemJFak5BTGpWV1dfNmREdm9JIiwibmFtZSI6IlR1IFBodW5nIiwicGljdHVyZSI6Imh0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS9hL0FDZzhvY0tDdnhpNEtEeDdUN0dTUjZla3BkWWNLb1dTMWlVUS0xQjRKVE1wSzR1R3JSd0E3X1U9czk2LWMiLCJnaXZlbl9uYW1lIjoiVHUiLCJmYW1pbHlfbmFtZSI6IlBodW5nIiwiaWF0IjoxNzMyMTI2MjkwLCJleHAiOjE3MzIxMjk4OTB9.hwvwY46xzCmteUroufTZWD7ggigvP1ObWSSA73YmL8-P_YVei1YQN6XM6DrFoOlGoQFohb1PcDdNTozYYtms7PScYY8_yBp0zHZihmobvBIAk3_QCr490A-u4QvsePVtnvrUGvqG2GAFbJ1q-_uvKgVRsf9WP9ydyh7zBu_1-j_7LqNfxySB2jYM9wpf8cnsV-raydY19Jsn2FD-9_PkFLQaCBbp2LjPjIMewN91kJZKPGtB0b53_HbOnkaRbiSXJD-3bIj0c2csQlpcbxqGRiK0vvaaqQOdG63zypKqtG9MzS0XHd_hqtJVtGgLaiDGlpEi7WU3WGAxiqW8lRH8jg\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/google/token",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"google",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "LogOUT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const accessToken = response.result.token; // Store the token in a variable\r",
							"\r",
							"pm.environment.set(\"accessToken\", accessToken); // Save the token to the environment\r",
							"//console.log(\"Access Token:\", accessToken); // Log the token to the console"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"token\": \"{{accessToken}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/logout",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "resetPassword",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const accessToken = response.result.token; // Store the token in a variable\r",
							"\r",
							"pm.environment.set(\"accessToken\", accessToken); // Save the token to the environment\r",
							"//console.log(\"Access Token:\", accessToken); // Log the token to the console"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"userTom\",\r\n    \"newPassword\": \"Thanhcong6(\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/resetPassword",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"resetPassword"
					]
				}
			},
			"response": []
		},
		{
			"name": "forgotPassword",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const accessToken = response.result.token; // Store the token in a variable\r",
							"\r",
							"pm.environment.set(\"accessToken\", accessToken); // Save the token to the environment\r",
							"//console.log(\"Access Token:\", accessToken); // Log the token to the console"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"adminTom\",\r\n  \"email\": \"tuphung010787@gmail.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/forgot-password",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"forgot-password"
					]
				}
			},
			"response": []
		},
		{
			"name": "resetPasswordWithToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const accessToken = response.result.token; // Store the token in a variable\r",
							"\r",
							"pm.environment.set(\"accessToken\", accessToken); // Save the token to the environment\r",
							"//console.log(\"Access Token:\", accessToken); // Log the token to the console"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"token\": \"833073\", // Use the code received in email\r\n  \"newPassword\": \"Thanhcong6(\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/reset-password-with-token",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"reset-password-with-token"
					]
				}
			},
			"response": []
		},
		{
			"name": "register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\": \"userTest\",\n    \"password\": \"Thanhcong6(\",\n    \"firstname\": \"Test\",\n    \"lastname\": \"User\",\n    \"dob\": \"1999-09-09\",\n    \"email\": \"bhm352@myy.haaga-helia.fi\",\n    \"roles\": [\n        \"User\"\n        ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/register",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"register"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Totp_Setup",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"deviceName\": \"My Phone\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/totp/setup",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"totp",
						"setup"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Totp_status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/totp/status",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"totp",
						"status"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Totp_devices",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/totp/devices",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"totp",
						"devices"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Totp_deviceById",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/totp/devices/248d36b7-3851-4d23-bdf3-d9ef3334fd5e",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"totp",
						"devices",
						"248d36b7-3851-4d23-bdf3-d9ef3334fd5e"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Totp_Verify",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"secretId\": \"e0df8c51-86db-4be8-844c-9e7896d22b26\",\n    \"code\": \"368073\" \n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/totp/verify",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"totp",
						"verify"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Totp_Gen_BackUp_Code",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/totp/backup-codes/regenerate",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"totp",
						"backup-codes",
						"regenerate"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Totp_Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n      \"username\": \"adminTom\",\n      \"password\": \"Thanhcong6(\",\n      \"totpCode\": \"533860\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/totp/token",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"totp",
						"token"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Totp_Token_Cookie",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n      \"username\": \"adminTom\",\n      \"password\": \"Thanhcong6(\",\n      \"totpCode\": \"456137\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/totp/token/cookie",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"totp",
						"token",
						"cookie"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "verifyEmail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\": \"userTest1\",\n    \"token\": \"498657\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/verify-email",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"verify-email"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "requestEmailChange",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userId\": \"391c216e-2177-430b-8951-51818249edab\",\n  \"currentEmail\": \"tuphung010787@gmail.com\",\n  \"newEmail\": \"phungthanhtu0107@gmail.com\",\n  \"password\": \"Thanhcong6(\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/request-email-change",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"request-email-change"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "verifyEmailChange",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userId\": \"391c216e-2177-430b-8951-51818249edab\",\n  \"newEmail\": \"phungthanhtu0107@gmail.com\",\n  \"verificationCode\": \"350749\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/verify-email-change",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"verify-email-change"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "resendVerification",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"adminTom\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/resend-verification",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"resend-verification"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Introspect-Token",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"token\": \"{{accessToken}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/introspect",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"introspect"
					]
				}
			},
			"response": []
		},
		{
			"name": "refreshToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const accessToken = response.result.token; // Store the token in a variable\r",
							"\r",
							"pm.environment.set(\"accessToken\", accessToken); // Save the token to the environment\r",
							"//console.log(\"Access Token:\", accessToken); // Log the token to the console"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"token\": \"{{accessToken}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/refreshToken",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"refreshToken"
					]
				}
			},
			"response": []
		},
		{
			"name": "User_getAll",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "ChatGroups_Get",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "User_Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\": \"userTest1\",\n    \"password\": \"123456dhfS@\",\n    \"firstname\": \"Test\",\n    \"lastname\": \"User\",\n    \"dob\": \"1999-09-09\",\n    \"email\": \"tuphung010787@gmail.com\",\n    \"roles\": [\n        \"User\"\n        ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "User_getMyInfo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();",
							"//console.log(\"response:\", response); ",
							"const userId = response.result.id;",
							"",
							"pm.environment.set(\"userId\", userId);",
							"//console.log(\"User id:\", userId); ",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist;",
							"    pm.expect(responseData.email).to.exist;",
							"    pm.expect(responseData.username).to.exist;",
							"    pm.expect(responseData.firstname).to.exist;",
							"    pm.expect(responseData.lastname).to.exist;",
							"    pm.expect(responseData.dob).to.exist;",
							"    pm.expect(responseData.roles).to.exist;",
							"    pm.expect(responseData.active).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Email address should be a string in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.result.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email address format is not valid\");",
							"});",
							"",
							"",
							"pm.test(\"Roles array is present and contains expected number of elements\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.result.roles).to.exist;",
							"    pm.expect(responseData.result.roles).to.be.an('array');",
							"    pm.expect(responseData.result.roles).to.have.lengthOf.at.least(1, \"Roles array should contain at least one element\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"The response should contain required properties\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.result.roles).to.be.an('array');",
							"    ",
							"    responseData.result.roles.forEach(function(role) {",
							"        pm.expect(role.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"        pm.expect(role.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");",
							"        pm.expect(role.color).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Color should not be empty\");",
							"    });",
							"",
							"    responseData.result.roles.forEach(function(role) {",
							"        pm.expect(role.permissions).to.be.an('array');",
							"        role.permissions.forEach(function(permission) {",
							"            pm.expect(permission.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Permission name should not be empty\");",
							"            pm.expect(permission.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Permission description should not be empty\");",
							"            pm.expect(permission.color).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Permission color should not be empty\");",
							"        });",
							"    });",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/myInfo",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"myInfo"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "User_getById",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/info?id={{userId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"info"
					],
					"query": [
						{
							"key": "id",
							"value": "{{userId}}"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "User_getById_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/{{userId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "User_updateById",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"username\": \"adminTom\",\r\n        \"password\": \"Thanhcong6(\",\r\n        \"firstname\": \"Tom\",\r\n        \"lastname\": \"Admin\",\r\n        \"dob\": \"1999-09-09\",\r\n        \"email\": \"tuphung010787@gmail.com\",\r\n        \"roles\": [\r\n            \"ADMIN\"\r\n        ]\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/{{userId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "User_deleteById",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users/4e0714c9-f2d0-4bc1-b5ee-988ed791372f",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"4e0714c9-f2d0-4bc1-b5ee-988ed791372f"
					]
				}
			},
			"response": []
		},
		{
			"name": "Outh2-getProject",
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "scope",
							"value": "https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/cloud-platform",
							"type": "string"
						},
						{
							"key": "client_authentication",
							"value": "header",
							"type": "string"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "string"
						},
						{
							"key": "accessTokenUrl",
							"value": "https://accounts.google.com/o/oauth2/token",
							"type": "string"
						},
						{
							"key": "authUrl",
							"value": "https://accounts.google.com/o/oauth2/auth",
							"type": "string"
						},
						{
							"key": "clientSecret",
							"value": "{{GOOGLE_CLIENT_SECRET}}",
							"type": "string"
						},
						{
							"key": "clientId",
							"value": "{{GOOGLE_CLIENT_ID}}",
							"type": "string"
						},
						{
							"key": "tokenName",
							"value": "GoogleOAuth Token",
							"type": "string"
						},
						{
							"key": "useBrowser",
							"value": true,
							"type": "boolean"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://cloudresourcemanager.googleapis.com/v1/projects",
					"protocol": "https",
					"host": [
						"cloudresourcemanager",
						"googleapis",
						"com"
					],
					"path": [
						"v1",
						"projects"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.request.addHeader({\r",
					"    key: 'Cookie',\r",
					"    value: 'refresh_token={{refresh_token}}'\r",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:9095/identify_service"
		},
		{
			"key": "base_url",
			"value": "http://35.226.132.133:9095/identify_service",
			"type": "string",
			"disabled": true
		},
		{
			"key": "base_url",
			"value": "http://softala.haaga-helia.fi:9095/identify_service",
			"type": "string",
			"disabled": true
		},
		{
			"key": "base_url",
			"value": "http://86.50.228.185:9095/identify_service",
			"type": "string",
			"disabled": true
		},
		{
			"key": "base_url",
			"value": "http://192.168.1.7:9095/identify_service",
			"type": "string",
			"disabled": true
		},
		{
			"key": "base_url",
			"value": "http://16.170.143.177:9095/identify_service",
			"type": "string",
			"disabled": true
		}
	]
}
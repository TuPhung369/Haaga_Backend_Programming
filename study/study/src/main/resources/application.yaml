server:
  port: 9095
  servlet:
    context-path: /identify_service
    session:
      tracking-modes: cookie
      cookie:
        secure: false # Just sent Cookie via HTTPS (local -> false)
        http-only: true # Prevent JavaScript access Cookie (prevent XSS)
        same-site: LAX # Support direction with FE, BE same Domain (`None` if FE vs BE run diff domain)
        max-age: 604800 # expired 7 days
        #_HOST_: #_HOST_refresh_token -> cookies working only main Domain (no use Sub Domain)
spring:
  session:
    jdbc:
      initialize-schema: always # Hoặc `redis: namespace: myapp:sessions` nếu using Redis
  profiles:
    active: dev # google || aws || dev
  sql:
    init:
      mode: never
      platform: mysql
  h2:
    console:
      enabled: true
  # devtools:
  #   restart:
  #     enabled: false
  #     log-condition-evaluation-delta: false
  # main:
  #   banner-mode: off
  #   log-startup-info: false
  mail:
    host: ${EMAIL_SERVER_HOST}
    port: ${EMAIL_SERVER_PORT}
    username: ${EMAIL_SERVER_USERNAME}
    password: ${EMAIL_SERVER_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
    hibernate:
      ddl-auto: update # none, update, validate, create, create-drop
    show-sql: true
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${OAUTH2_CLIENT_ID}
            client-secret: ${OAUTH2_CLIENT_SECRET}
            scope: openid, email, profile
            redirect-uri: "${OAUTH2_REDIRECT_URI}"
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub

# Security settings
security:
  max-failed-attempts: 3
  block-duration-minutes: 30
  rate-limit:
    enabled: true
    max-requests-per-second: 10

# reCAPTCHA Configuration
recaptcha:
  secret:
    v3: ${RECAPTCHA_SECRET_V3:2fl9V3Xl0ks5yX9DGuVHRV1H6ld9F0OjhrYhP7QvxqJrB/1OLKJHpPoMxSBcUe3EEC6hq0kseMfUQlhK2w2yQA==}
    v2: ${RECAPTCHA_SECRET_V2:2fl9V3Xl0ks5yX9dGuVHRV1H6ld9F01jhrYhP7QvxqJrB/1OLKJHpPoMxSBcUe3EEC6hq0kseMfUQlhK2w2yQA==}
  verification.url: https://www.google.com/recaptcha/api/siteverify
  score.threshold: 0.5

cleanup:
  cron:
    expression: "0 0 2 * * ?" # 2AM every day
totp:
  encryption:
    key: "2fl9V3Xl0ks5yX9dGuVHRV1H6ld9F0OjhrYhP7QvxqJrB/1OLKJHpPoMxSBcUe3EEC6hq0kseMfUQlhK2w2yQA=="
n8n:
  webhook:
    url: http://localhost:5678/webhook/c1784e69-2d89-45fb-b47d-dd13dddcf31e/chat
logging:
  level:
    root: DEBUG # Global log level
    "[org.springframework]": DEBUG # Spring framework logs
    "[org.springframework.boot]": DEBUG
    "[org.springframework.beans.factory]": DEBUG
    "[org.springframework.security.oauth2]": ERROR
    "[org.springframework.web.cors]": DEBUG
    "[com.database.study.service.SecurityMonitoringService]": DEBUG # Thêm debug logging cho SecurityMonitoringService


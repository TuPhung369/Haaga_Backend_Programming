import axios from "axios";
import type { AxiosError } from "axios";
import { CalendarEvent, ExtendApiError } from "../type/types";

const API_BASE_URI =
  import.meta.env.VITE_API_BASE_URI || "http://localhost:9095/identify_service";

// Axios instance with default headers
const apiClient = axios.create({
  baseURL: API_BASE_URI,
  headers: {
    "Content-Type": "application/json",
  },
  timeout: 10000, // Add timeout to prevent indefinite waiting
});

// Define interfaces for calendar event responses from API
interface CalendarEventResponse {
  code: number;
  result: CalendarEvent;
  message?: string;
}

interface CalendarEventsResponse {
  code: number;
  result: CalendarEvent[];
  message?: string;
}

// Define type for error data from the API
interface ApiErrorResponse {
  code?: number;
  message?: string;
  httpCode?: number;
  success?: boolean;
  severity?: string;
}

/**
 * Helper function to create a standardized error object
 */
const createErrorObject = (
  error: unknown,
  defaultMessage: string,
  errorType: ExtendApiError["errorType"]
): ExtendApiError => {
  const extendedError: ExtendApiError = {
    message: defaultMessage,
    errorType: errorType,
    originalError: error,
  };

  if (error && typeof error === "object" && "response" in error) {
    const axiosError = error as AxiosError<ApiErrorResponse>;
    if (axiosError.response?.data?.message) {
      extendedError.message = axiosError.response.data.message;
    }
    if (axiosError.response?.data?.code) {
      extendedError.code = axiosError.response.data.code;
    }
    if (axiosError.response?.status) {
      extendedError.httpCode = String(axiosError.response.status);
    }
  }

  return extendedError;
};

export const fetchEventsByUserId = async (
  userId: string,
  token: string
): Promise<CalendarEventsResponse> => {
  try {
    const response = await apiClient.get<CalendarEventsResponse>(
      `/events?userId=${userId}`,
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );
    return response.data;
  } catch (error) {
    console.error("Error fetching events:", error);
    const extendedError = createErrorObject(
      error,
      "Failed to fetch calendar events",
      "FETCH"
    );
    throw extendedError;
  }
};

export const createEvent = async (
  eventData: Omit<CalendarEvent, "id" | "createdAt">, // ID and createdAt are generated by the server
  token: string
): Promise<CalendarEventResponse> => {
  try {
    const response = await apiClient.post<CalendarEventResponse>(
      "/events",
      eventData,
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );
    return response.data;
  } catch (error) {
    console.error("Error creating event:", error);
    const extendedError = createErrorObject(
      error,
      "Failed to create calendar event",
      "CREATE"
    );
    throw extendedError;
  }
};

export const updateEvent = async (
  eventId: string,
  eventData: Partial<CalendarEvent>,
  token: string
): Promise<CalendarEventResponse> => {
  try {
    if (!token) {
      const authError: ExtendApiError = {
        message: "No authentication token provided",
        errorType: "UPDATE",
      };
      throw authError;
    }

    const response = await apiClient.put<CalendarEventResponse>(
      `/events/${eventId}`,
      eventData,
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );
    return response.data;
  } catch (error) {
    // If it's already our ExtendApiError type, just rethrow it
    if (error && typeof error === "object" && "errorType" in error) {
      throw error;
    }

    console.error("Error updating event:", error);
    const extendedError = createErrorObject(
      error,
      `Failed to update calendar event ${eventId}`,
      "UPDATE"
    );
    throw extendedError;
  }
};

export const updateEventSeries = async (
  seriesId: string,
  eventData: Partial<CalendarEvent>,
  token: string
): Promise<CalendarEventsResponse> => {
  try {
    const response = await apiClient.put<CalendarEventsResponse>(
      `/events/series/${seriesId}`,
      eventData,
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );
    return response.data;
  } catch (error) {
    console.error("Error updating event series:", error);
    const extendedError = createErrorObject(
      error,
      `Failed to update event series ${seriesId}`,
      "UPDATE"
    );
    throw extendedError;
  }
};

export const deleteEvent = async (
  eventId: string,
  token: string
): Promise<void> => {
  try {
    await apiClient.delete(`/events/${eventId}`, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
  } catch (error) {
    console.error("Error deleting event:", error);
    const extendedError = createErrorObject(
      error,
      `Failed to delete calendar event ${eventId}`,
      "DELETE"
    );
    throw extendedError;
  }
};

export const deleteEventSeries = async (
  seriesId: string,
  token: string
): Promise<void> => {
  try {
    await apiClient.delete(`/events/series/${seriesId}`, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
  } catch (error) {
    console.error("Error deleting event series:", error);
    const extendedError = createErrorObject(
      error,
      `Failed to delete event series ${seriesId}`,
      "DELETE"
    );
    throw extendedError;
  }
};

